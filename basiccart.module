<?php
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\basiccart\OrderConnectStorage;
use Drupal\basiccart\Utility;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Xss;

function basiccart_theme($existing, $type, $theme, $path) {
  return array(
    'basiccart_cart_template' => array(
      'variables' => array('basiccart' => NULL),
    ),
  );
}


/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function basiccart_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  global $base_url;
}

/**
* Implements hook_page_attachments().
*/

function basiccart_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'basiccart/basiccart';
}

/**
* Implements hook_entity_insert().
*/

function basiccart_entity_insert(EntityInterface $node) {
   $utility = new Utility();
  if($utility::is_basiccart_order($node->bundle())) {
    $get_cart = $utility::get_cart();
    $cart     = $get_cart['cart'];
    $nid   = $node->id();
    $order = new OrderConnectStorage();
    foreach ($cart  as $key => $value) {
      $params['oid'] = $nid;
      $params['id']  = $key;
      $params['entitytype']  = $value->getEntityTypeId();
      $params['quantity']  = $get_cart['cart_quantity'][$key];
      $order->insert($params);
    }
   $utility::empty_cart();
  } 
}

/**
* Implements hook_form_alter().
*/

function basiccart_form_alter(&$form,FormStateInterface $form_state, $form_id) {
   $form_ids = array('node_basiccart_order_edit_form', 'node_basiccart_order_form' );
   if(in_array($form_id,$form_ids)) {
      $form['title']['widget'][0]['value']['#title'] = t('Name');

      unset($form['basiccart_vat']);
      unset($form['basiccart_total_price']);
      $form['actions']['submit']['#value'] = t('Place Order');
   }
}

/**
* Implements hook_entity_presave().
*/

function basiccart_entity_presave(EntityInterface $node) {
   $utility = new Utility();
  if($utility::is_basiccart_order($node->bundle())) {
    $get_price = $utility::get_total_price();
     $bundle = $node->bundle();
    if(empty($node->id())) {
      $node->set('basiccart_vat', $get_price->vat);
      $node->set('basiccart_total_price', $get_price->total);
    }
  }  
}

/**
* Implements hook_entity_delete().
*/

function basiccart_entity_delete(EntityInterface $node) {
   $utility = new Utility();
  if($utility::is_basiccart_order($node->bundle())) {
    $entitytype = $node->getEntityTypeId();
    $id = $node->id();
    $bundle = $node->bundle();
    if(isset($entitytype) && isset($id)){
       $params['oid'] = $id;
       $params['entitytype'] = $entitytype;  
       $order = new OrderConnectStorage();
       $order->order_delete($params);
    }
  } 
}


/**
* Implements hook_mail().
*/

function basiccart_mail($key, &$message, $params) {
  $utility = new Utility();
  $config = $utility->checkout_settings();
   $options = array(
     'langcode' => $message['langcode'],
   );
  $message['from'] = \Drupal::config('system.site')->get('mail');
 switch ($key) {
    case 'admin_mail':
      $message['subject'] = t(SafeMarkup::checkPlain($config->admin['subject']));
      $message['body'][] = Xss::filter($config->admin['body']);
      break;

    case 'user_mail':
      $message['subject'] = t(SafeMarkup::checkPlain($config->user['subject']));
      $message['body'][] = Xss::filter($config->user['body']);
      break;
 }



/**
 * Sending emails.
 */
function basiccart_order_send_notifications($order) {
  // Admin message.
  $utility = new Utility();
  $config = $utility->checkout_settings();
  $message_html = t(variable_get('basic_cart_admin_message'));
  
  // Token data.
  $data = array('node' => $order);
  $message_html = token_replace($message_html, $data, array('callback' => 'basic_cart_order_tokens_format'));
  
  // Admin mail.
  $params['admin_message'] = $message_html;
  $site_mail = variable_get('site_mail');
  
  $admin_emails = variable_get('basic_cart_admin_emails');
  if (empty ($admin_emails)) {
    // Sending mail to admin.
    $message = drupal_mail('basic_cart_order', 'admin_mail', $site_mail, language_default(), $params);

    $mails_sent = 0;
    if ($message['result']) {
      $mails_sent++;
    }
  }
  else {
    $admin_emails = explode("\n", $admin_emails);
    if (is_array($admin_emails) && !empty($admin_emails)) {
      $ok = FALSE;
      foreach ($admin_emails as $admin_email) {
        // Sending mail to each admin.
        $message = drupal_mail('basic_cart_order', 'admin_mail', $admin_email, language_default(), $params);
        
        // Verifing that the mail was sent for at least one email address.
        if ($message['result']) {
          $ok = TRUE;
        }
      }
      
      $mails_sent = 0;
      if ($ok) {
        $mails_sent++;
      }
    }
  }
  
  // User email.
  $send_user_mail = variable_get('basic_cart_send_user_message');
  if ($send_user_mail) {
    $message_html = t(variable_get('basic_cart_user_message'));
    
    // Token data.
    $data = array('node' => $order);
    $message_html = token_replace($message_html, $data, array('callback' => 'basic_cart_order_tokens_format'));
    $params['user_message'] = $message_html;
    
    // Sending mail.
    $email = field_get_items('node', $order, 'field_email');
    $email = $email[0]['value'];
    $message = drupal_mail('basic_cart_order', 'user_mail', $email, language_default(), $params);

    if ($message['result']) {
      $mails_sent++;
    }
  }
  
  return $mails_sent;
}


/*

 $mailManager = \Drupal::service('plugin.manager.mail');
 $module = ‘<module_name>’;
 $key = 'create_article';
 $to = \Drupal::currentUser()->getEmail();
 $params['message'] = $entity->get('body')->value;
 $params['node_title'] = $entity->label();
 $langcode = \Drupal::currentUser()->getPreferredLangcode();
 $send = true;
 $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
 if ($result['result'] !== true) {
   drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
 }
 else {
   drupal_set_message(t('Your message has been sent.'));
 }
}

 */