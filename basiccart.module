<?php
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\basiccart\OrderConnectStorage;
use Drupal\basiccart\Utility;


function basiccart_theme($existing, $type, $theme, $path) {
  return array(
    'basiccart_cart_template' => array(
      'variables' => array('basiccart' => NULL),
    ),
  );
}


/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function basiccart_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  global $base_url;
}


function basiccart_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'basiccart/basiccart';
}

function basiccart_node_insert(EntityInterface $node) {

    $utility = new Utility();
    $get_cart = $utility::get_cart();
    $cart     = $get_cart['cart'];
    $nid   = $node->id();
    $order = new OrderConnectStorage();

    $utility = new Utility();
   /* $get_price = $utility::get_total_price();
   // $node = node_load($node->id);
    $node->set('basiccart_total_price',$get_price->total);
    $node->set('basiccart_vat',$get_price->vat);
    $node->save(); */
    foreach ($cart  as $key => $value) {
      $params['oid'] = $nid;
      $params['id']  = $key;
      $params['entitytype']  = $value->bundle();
      $params['quantity']  = $get_cart['cart_quantity'][$key];
      $order->insert($params);
    }

   $utility::empty_cart();
}


function basiccart_form_alter(&$form,FormStateInterface $form_state, $form_id) {

}

function basiccart_node_presave(NodeInterface $node) {
   /* $utility = new Utility();
    $get_price = $utility::get_total_price();
    print_r($get_price->); die; */

    //$node->save();
}


